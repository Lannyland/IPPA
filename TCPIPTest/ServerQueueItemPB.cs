// Generated by ProtoGen, Version=2.4.1.473, Culture=neutral, PublicKeyToken=55f7125234beb589.  DO NOT EDIT!
#pragma warning disable 1591, 0612
#region Designer generated code

using pb = global::Google.ProtocolBuffers;
using pbc = global::Google.ProtocolBuffers.Collections;
using pbd = global::Google.ProtocolBuffers.Descriptors;
using scg = global::System.Collections.Generic;
namespace ProtoBuffer {
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
  [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ProtoGen", "2.4.1.473")]
  public static partial class ServerQueueItemPB {
  
    #region Extension registration
    public static void RegisterAllExtensions(pb::ExtensionRegistry registry) {
    }
    #endregion
    #region Static variables
    internal static pbd::MessageDescriptor internal__static_ProtoBuffer_PathPlanningRequest__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::ProtoBuffer.PathPlanningRequest, global::ProtoBuffer.PathPlanningRequest.Builder> internal__static_ProtoBuffer_PathPlanningRequest__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_ProtoBuffer_PathPlanningRequest_MatrixRow__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::ProtoBuffer.PathPlanningRequest.Types.MatrixRow, global::ProtoBuffer.PathPlanningRequest.Types.MatrixRow.Builder> internal__static_ProtoBuffer_PathPlanningRequest_MatrixRow__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_ProtoBuffer_PathPlanningRequest_Matrix__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::ProtoBuffer.PathPlanningRequest.Types.Matrix, global::ProtoBuffer.PathPlanningRequest.Types.Matrix.Builder> internal__static_ProtoBuffer_PathPlanningRequest_Matrix__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_ProtoBuffer_PathPlanningRequest_DistPoint__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::ProtoBuffer.PathPlanningRequest.Types.DistPoint, global::ProtoBuffer.PathPlanningRequest.Types.DistPoint.Builder> internal__static_ProtoBuffer_PathPlanningRequest_DistPoint__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_ProtoBuffer_ServerQueueItem__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::ProtoBuffer.ServerQueueItem, global::ProtoBuffer.ServerQueueItem.Builder> internal__static_ProtoBuffer_ServerQueueItem__FieldAccessorTable;
    #endregion
    #region Descriptor
    public static pbd::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbd::FileDescriptor descriptor;
    
    static ServerQueueItemPB() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          "CiB0dXRvcmlhbC9TZXJ2ZXJRdWV1ZUl0ZW1QQi5wcm90bxILUHJvdG9CdWZm" + 
          "ZXIitAsKE1BhdGhQbGFubmluZ1JlcXVlc3QSIAoSVXNlRGlzdHJpYnV0aW9u" + 
          "TWFwGAEgASgIOgR0cnVlEiIKFFVzZVRhc2tEaWZmaWN1bHR5TWFwGAIgASgI" + 
          "OgR0cnVlEhoKDFVzZUhpZXJhcmNoeRgDIAEoCDoEdHJ1ZRIjChVVc2VDb2Fy" + 
          "c2VUb0ZpbmVTZWFyY2gYBCABKAg6BHRydWUSIwoVVXNlUGFyYWxsZWxQcm9j" + 
          "ZXNzaW5nGAUgASgIOgR0cnVlEkUKC1ZlaGljbGVUeXBlGAYgASgOMiguUHJv" + 
          "dG9CdWZmZXIuUGF0aFBsYW5uaW5nUmVxdWVzdC5VQVZUeXBlOgZDb3B0ZXIS" + 
          "VAoNRGV0ZWN0aW9uVHlwZRgHIAEoDjImLlByb3RvQnVmZmVyLlBhdGhQbGFu" + 
          "bmluZ1JlcXVlc3QuRFR5cGU6FUZpeEFtb3VudEluUGVyY2VudGFnZRIYCg1E" + 
          "ZXRlY3Rpb25SYXRlGAggASgBOgExEjgKB0Rpc3RNYXAYCSABKAsyJy5Qcm90" + 
          "b0J1ZmZlci5QYXRoUGxhbm5pbmdSZXF1ZXN0Lk1hdHJpeBI4CgdEaWZmTWFw" + 
          "GAogASgLMicuUHJvdG9CdWZmZXIuUGF0aFBsYW5uaW5nUmVxdWVzdC5NYXRy" + 
          "aXgSGgoLVXNlRW5kUG9pbnQYCyABKAg6BWZhbHNlEg4KAVQYDCABKAU6AzYw" + 
          "MBI6CgZwU3RhcnQYDSABKAsyKi5Qcm90b0J1ZmZlci5QYXRoUGxhbm5pbmdS" + 
          "ZXF1ZXN0LkRpc3RQb2ludBI4CgRwRW5kGA4gASgLMiouUHJvdG9CdWZmZXIu" + 
          "UGF0aFBsYW5uaW5nUmVxdWVzdC5EaXN0UG9pbnQSRAoIQWxnVG9Vc2UYDyAB" + 
          "KA4yKC5Qcm90b0J1ZmZlci5QYXRoUGxhbm5pbmdSZXF1ZXN0LkFsZ1R5cGU6" + 
          "CFJFQUxUSU1FEhcKCEJhdGNoUnVuGBAgASgIOgVmYWxzZRIUCghSdW5UaW1l" + 
          "cxgRIAEoBToCMTASGAoNTWF4RGlmZmljdWx0eRgSIAEoBToBMxIQCghEaWZm" + 
          "UmF0ZRgTIAMoARIXCghEcmF3UGF0aBgUIAEoCDoFZmFsc2USDAoBZBgVIAEo" + 
          "BToBMBIUCglUb3BOQ291bnQYFiABKAU6ATMaGQoJTWF0cml4Um93EgwKBGNl" + 
          "bGwYASADKAIaQQoGTWF0cml4EjcKA3JvdxgBIAMoCzIqLlByb3RvQnVmZmVy" + 
          "LlBhdGhQbGFubmluZ1JlcXVlc3QuTWF0cml4Um93Gi4KCURpc3RQb2ludBIO" + 
          "CgNyb3cYASABKAU6ATASEQoGY29sdW1uGAIgASgFOgEwIiIKB1VBVlR5cGUS" + 
          "CwoHRml4V2luZxAAEgoKBkNvcHRlchABIkQKBURUeXBlEg0KCUZpeEFtb3Vu" + 
          "dBAAEhkKFUZpeEFtb3VudEluUGVyY2VudGFnZRABEhEKDUZpeFBlcmNlbnRh" + 
          "Z2UQAiLNAgoHQWxnVHlwZRIGCgJDQxAAEggKBENDX0UQARINCglMSENHV0NP" + 
          "TlYQAhIPCgtMSENHV0NPTlZfRRADEgsKB0xIQ0dXUEYQBBINCglMSENHV1BG" + 
          "X0UQBRINCglMSENSYW5kb20QBhIPCgtMSENSYW5kb21fRRAHEgoKBlJhbmRv" + 
          "bRAIEgwKCFJhbmRvbV9FEAkSCAoEQ09OVhAKEgoKBkNPTlZfRRALEgYKAlBG" + 
          "EAwSCAoEUEZfRRANEgoKBlRvcFR3bxAOEgwKCFRvcFR3b19FEA8SCAoEVG9w" + 
          "ThAQEgoKBlRvcE5fRRAREgsKB1RvcFR3b0gQEhINCglUb3BUd29IX0UQExIJ" + 
          "CgVUb3BOSBAUEgsKB1RvcE5IX0UQFRIGCgJFQRAWEggKBEVBX0UQFxIMCghS" + 
          "RUFMVElNRRAYEg4KClJFQUxUSU1FX0UQGSJkCg9TZXJ2ZXJRdWV1ZUl0ZW0S" + 
          "GwoIQ2FsbGVySVAYASABKAk6CTEyNy4wLjAuMRI0CgpjdXJSZXF1ZXN0GAIg" + 
          "ASgLMiAuUHJvdG9CdWZmZXIuUGF0aFBsYW5uaW5nUmVxdWVzdEICSAE=");
      pbd::FileDescriptor.InternalDescriptorAssigner assigner = delegate(pbd::FileDescriptor root) {
        descriptor = root;
        internal__static_ProtoBuffer_PathPlanningRequest__Descriptor = Descriptor.MessageTypes[0];
        internal__static_ProtoBuffer_PathPlanningRequest__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::ProtoBuffer.PathPlanningRequest, global::ProtoBuffer.PathPlanningRequest.Builder>(internal__static_ProtoBuffer_PathPlanningRequest__Descriptor,
                new string[] { "UseDistributionMap", "UseTaskDifficultyMap", "UseHierarchy", "UseCoarseToFineSearch", "UseParallelProcessing", "VehicleType", "DetectionType", "DetectionRate", "DistMap", "DiffMap", "UseEndPoint", "T", "PStart", "PEnd", "AlgToUse", "BatchRun", "RunTimes", "MaxDifficulty", "DiffRate", "DrawPath", "D", "TopNCount", });
        internal__static_ProtoBuffer_PathPlanningRequest_MatrixRow__Descriptor = internal__static_ProtoBuffer_PathPlanningRequest__Descriptor.NestedTypes[0];
        internal__static_ProtoBuffer_PathPlanningRequest_MatrixRow__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::ProtoBuffer.PathPlanningRequest.Types.MatrixRow, global::ProtoBuffer.PathPlanningRequest.Types.MatrixRow.Builder>(internal__static_ProtoBuffer_PathPlanningRequest_MatrixRow__Descriptor,
                new string[] { "Cell", });
        internal__static_ProtoBuffer_PathPlanningRequest_Matrix__Descriptor = internal__static_ProtoBuffer_PathPlanningRequest__Descriptor.NestedTypes[1];
        internal__static_ProtoBuffer_PathPlanningRequest_Matrix__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::ProtoBuffer.PathPlanningRequest.Types.Matrix, global::ProtoBuffer.PathPlanningRequest.Types.Matrix.Builder>(internal__static_ProtoBuffer_PathPlanningRequest_Matrix__Descriptor,
                new string[] { "Row", });
        internal__static_ProtoBuffer_PathPlanningRequest_DistPoint__Descriptor = internal__static_ProtoBuffer_PathPlanningRequest__Descriptor.NestedTypes[2];
        internal__static_ProtoBuffer_PathPlanningRequest_DistPoint__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::ProtoBuffer.PathPlanningRequest.Types.DistPoint, global::ProtoBuffer.PathPlanningRequest.Types.DistPoint.Builder>(internal__static_ProtoBuffer_PathPlanningRequest_DistPoint__Descriptor,
                new string[] { "Row", "Column", });
        internal__static_ProtoBuffer_ServerQueueItem__Descriptor = Descriptor.MessageTypes[1];
        internal__static_ProtoBuffer_ServerQueueItem__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::ProtoBuffer.ServerQueueItem, global::ProtoBuffer.ServerQueueItem.Builder>(internal__static_ProtoBuffer_ServerQueueItem__Descriptor,
                new string[] { "CallerIP", "CurRequest", });
        return null;
      };
      pbd::FileDescriptor.InternalBuildGeneratedFileFrom(descriptorData,
          new pbd::FileDescriptor[] {
          }, assigner);
    }
    #endregion
    
  }
  #region Messages
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
  [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ProtoGen", "2.4.1.473")]
  public sealed partial class PathPlanningRequest : pb::GeneratedMessage<PathPlanningRequest, PathPlanningRequest.Builder> {
    private PathPlanningRequest() { }
    private static readonly PathPlanningRequest defaultInstance = new PathPlanningRequest().MakeReadOnly();
    private static readonly string[] _pathPlanningRequestFieldNames = new string[] { "AlgToUse", "BatchRun", "DetectionRate", "DetectionType", "DiffMap", "DiffRate", "DistMap", "DrawPath", "MaxDifficulty", "RunTimes", "T", "TopNCount", "UseCoarseToFineSearch", "UseDistributionMap", "UseEndPoint", "UseHierarchy", "UseParallelProcessing", "UseTaskDifficultyMap", "VehicleType", "d", "pEnd", "pStart" };
    private static readonly uint[] _pathPlanningRequestFieldTags = new uint[] { 120, 128, 65, 56, 82, 153, 74, 160, 144, 136, 96, 176, 32, 8, 88, 24, 40, 16, 48, 168, 114, 106 };
    public static PathPlanningRequest DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override PathPlanningRequest DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override PathPlanningRequest ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::ProtoBuffer.ServerQueueItemPB.internal__static_ProtoBuffer_PathPlanningRequest__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<PathPlanningRequest, PathPlanningRequest.Builder> InternalFieldAccessors {
      get { return global::ProtoBuffer.ServerQueueItemPB.internal__static_ProtoBuffer_PathPlanningRequest__FieldAccessorTable; }
    }
    
    #region Nested types
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ProtoGen", "2.4.1.473")]
    public static class Types {
      [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
      [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ProtoGen", "2.4.1.473")]
      public enum UAVType {
        FixWing = 0,
        Copter = 1,
      }
      
      [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
      [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ProtoGen", "2.4.1.473")]
      public enum DType {
        FixAmount = 0,
        FixAmountInPercentage = 1,
        FixPercentage = 2,
      }
      
      [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
      [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ProtoGen", "2.4.1.473")]
      public enum AlgType {
        CC = 0,
        CC_E = 1,
        LHCGWCONV = 2,
        LHCGWCONV_E = 3,
        LHCGWPF = 4,
        LHCGWPF_E = 5,
        LHCRandom = 6,
        LHCRandom_E = 7,
        Random = 8,
        Random_E = 9,
        CONV = 10,
        CONV_E = 11,
        PF = 12,
        PF_E = 13,
        TopTwo = 14,
        TopTwo_E = 15,
        TopN = 16,
        TopN_E = 17,
        TopTwoH = 18,
        TopTwoH_E = 19,
        TopNH = 20,
        TopNH_E = 21,
        EA = 22,
        EA_E = 23,
        REALTIME = 24,
        REALTIME_E = 25,
      }
      
      [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
      [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
      [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ProtoGen", "2.4.1.473")]
      public sealed partial class MatrixRow : pb::GeneratedMessage<MatrixRow, MatrixRow.Builder> {
        private MatrixRow() { }
        private static readonly MatrixRow defaultInstance = new MatrixRow().MakeReadOnly();
        private static readonly string[] _matrixRowFieldNames = new string[] { "cell" };
        private static readonly uint[] _matrixRowFieldTags = new uint[] { 13 };
        public static MatrixRow DefaultInstance {
          get { return defaultInstance; }
        }
        
        public override MatrixRow DefaultInstanceForType {
          get { return DefaultInstance; }
        }
        
        protected override MatrixRow ThisMessage {
          get { return this; }
        }
        
        public static pbd::MessageDescriptor Descriptor {
          get { return global::ProtoBuffer.ServerQueueItemPB.internal__static_ProtoBuffer_PathPlanningRequest_MatrixRow__Descriptor; }
        }
        
        protected override pb::FieldAccess.FieldAccessorTable<MatrixRow, MatrixRow.Builder> InternalFieldAccessors {
          get { return global::ProtoBuffer.ServerQueueItemPB.internal__static_ProtoBuffer_PathPlanningRequest_MatrixRow__FieldAccessorTable; }
        }
        
        public const int CellFieldNumber = 1;
        private pbc::PopsicleList<float> cell_ = new pbc::PopsicleList<float>();
        public scg::IList<float> CellList {
          get { return pbc::Lists.AsReadOnly(cell_); }
        }
        public int CellCount {
          get { return cell_.Count; }
        }
        public float GetCell(int index) {
          return cell_[index];
        }
        
        public override bool IsInitialized {
          get {
            return true;
          }
        }
        
        public override void WriteTo(pb::ICodedOutputStream output) {
          int size = SerializedSize;
          string[] field_names = _matrixRowFieldNames;
          if (cell_.Count > 0) {
            output.WriteFloatArray(1, field_names[0], cell_);
          }
          UnknownFields.WriteTo(output);
        }
        
        private int memoizedSerializedSize = -1;
        public override int SerializedSize {
          get {
            int size = memoizedSerializedSize;
            if (size != -1) return size;
            
            size = 0;
            {
              int dataSize = 0;
              dataSize = 4 * cell_.Count;
              size += dataSize;
              size += 1 * cell_.Count;
            }
            size += UnknownFields.SerializedSize;
            memoizedSerializedSize = size;
            return size;
          }
        }
        
        public static MatrixRow ParseFrom(pb::ByteString data) {
          return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
        }
        public static MatrixRow ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
          return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
        }
        public static MatrixRow ParseFrom(byte[] data) {
          return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
        }
        public static MatrixRow ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
          return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
        }
        public static MatrixRow ParseFrom(global::System.IO.Stream input) {
          return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
        }
        public static MatrixRow ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
          return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
        }
        public static MatrixRow ParseDelimitedFrom(global::System.IO.Stream input) {
          return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
        }
        public static MatrixRow ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
          return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
        }
        public static MatrixRow ParseFrom(pb::ICodedInputStream input) {
          return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
        }
        public static MatrixRow ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
          return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
        }
        private MatrixRow MakeReadOnly() {
          cell_.MakeReadOnly();
          return this;
        }
        
        public static Builder CreateBuilder() { return new Builder(); }
        public override Builder ToBuilder() { return CreateBuilder(this); }
        public override Builder CreateBuilderForType() { return new Builder(); }
        public static Builder CreateBuilder(MatrixRow prototype) {
          return new Builder(prototype);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ProtoGen", "2.4.1.473")]
        public sealed partial class Builder : pb::GeneratedBuilder<MatrixRow, Builder> {
          protected override Builder ThisBuilder {
            get { return this; }
          }
          public Builder() {
            result = DefaultInstance;
            resultIsReadOnly = true;
          }
          internal Builder(MatrixRow cloneFrom) {
            result = cloneFrom;
            resultIsReadOnly = true;
          }
          
          private bool resultIsReadOnly;
          private MatrixRow result;
          
          private MatrixRow PrepareBuilder() {
            if (resultIsReadOnly) {
              MatrixRow original = result;
              result = new MatrixRow();
              resultIsReadOnly = false;
              MergeFrom(original);
            }
            return result;
          }
          
          public override bool IsInitialized {
            get { return result.IsInitialized; }
          }
          
          protected override MatrixRow MessageBeingBuilt {
            get { return PrepareBuilder(); }
          }
          
          public override Builder Clear() {
            result = DefaultInstance;
            resultIsReadOnly = true;
            return this;
          }
          
          public override Builder Clone() {
            if (resultIsReadOnly) {
              return new Builder(result);
            } else {
              return new Builder().MergeFrom(result);
            }
          }
          
          public override pbd::MessageDescriptor DescriptorForType {
            get { return global::ProtoBuffer.PathPlanningRequest.Types.MatrixRow.Descriptor; }
          }
          
          public override MatrixRow DefaultInstanceForType {
            get { return global::ProtoBuffer.PathPlanningRequest.Types.MatrixRow.DefaultInstance; }
          }
          
          public override MatrixRow BuildPartial() {
            if (resultIsReadOnly) {
              return result;
            }
            resultIsReadOnly = true;
            return result.MakeReadOnly();
          }
          
          public override Builder MergeFrom(pb::IMessage other) {
            if (other is MatrixRow) {
              return MergeFrom((MatrixRow) other);
            } else {
              base.MergeFrom(other);
              return this;
            }
          }
          
          public override Builder MergeFrom(MatrixRow other) {
            if (other == global::ProtoBuffer.PathPlanningRequest.Types.MatrixRow.DefaultInstance) return this;
            PrepareBuilder();
            if (other.cell_.Count != 0) {
              result.cell_.Add(other.cell_);
            }
            this.MergeUnknownFields(other.UnknownFields);
            return this;
          }
          
          public override Builder MergeFrom(pb::ICodedInputStream input) {
            return MergeFrom(input, pb::ExtensionRegistry.Empty);
          }
          
          public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
            PrepareBuilder();
            pb::UnknownFieldSet.Builder unknownFields = null;
            uint tag;
            string field_name;
            while (input.ReadTag(out tag, out field_name)) {
              if(tag == 0 && field_name != null) {
                int field_ordinal = global::System.Array.BinarySearch(_matrixRowFieldNames, field_name, global::System.StringComparer.Ordinal);
                if(field_ordinal >= 0)
                  tag = _matrixRowFieldTags[field_ordinal];
                else {
                  if (unknownFields == null) {
                    unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
                  }
                  ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
                  continue;
                }
              }
              switch (tag) {
                case 0: {
                  throw pb::InvalidProtocolBufferException.InvalidTag();
                }
                default: {
                  if (pb::WireFormat.IsEndGroupTag(tag)) {
                    if (unknownFields != null) {
                      this.UnknownFields = unknownFields.Build();
                    }
                    return this;
                  }
                  if (unknownFields == null) {
                    unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
                  }
                  ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
                  break;
                }
                case 10:
                case 13: {
                  input.ReadFloatArray(tag, field_name, result.cell_);
                  break;
                }
              }
            }
            
            if (unknownFields != null) {
              this.UnknownFields = unknownFields.Build();
            }
            return this;
          }
          
          
          public pbc::IPopsicleList<float> CellList {
            get { return PrepareBuilder().cell_; }
          }
          public int CellCount {
            get { return result.CellCount; }
          }
          public float GetCell(int index) {
            return result.GetCell(index);
          }
          public Builder SetCell(int index, float value) {
            PrepareBuilder();
            result.cell_[index] = value;
            return this;
          }
          public Builder AddCell(float value) {
            PrepareBuilder();
            result.cell_.Add(value);
            return this;
          }
          public Builder AddRangeCell(scg::IEnumerable<float> values) {
            PrepareBuilder();
            result.cell_.Add(values);
            return this;
          }
          public Builder ClearCell() {
            PrepareBuilder();
            result.cell_.Clear();
            return this;
          }
        }
        static MatrixRow() {
          object.ReferenceEquals(global::ProtoBuffer.ServerQueueItemPB.Descriptor, null);
        }
      }
      
      [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
      [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
      [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ProtoGen", "2.4.1.473")]
      public sealed partial class Matrix : pb::GeneratedMessage<Matrix, Matrix.Builder> {
        private Matrix() { }
        private static readonly Matrix defaultInstance = new Matrix().MakeReadOnly();
        private static readonly string[] _matrixFieldNames = new string[] { "row" };
        private static readonly uint[] _matrixFieldTags = new uint[] { 10 };
        public static Matrix DefaultInstance {
          get { return defaultInstance; }
        }
        
        public override Matrix DefaultInstanceForType {
          get { return DefaultInstance; }
        }
        
        protected override Matrix ThisMessage {
          get { return this; }
        }
        
        public static pbd::MessageDescriptor Descriptor {
          get { return global::ProtoBuffer.ServerQueueItemPB.internal__static_ProtoBuffer_PathPlanningRequest_Matrix__Descriptor; }
        }
        
        protected override pb::FieldAccess.FieldAccessorTable<Matrix, Matrix.Builder> InternalFieldAccessors {
          get { return global::ProtoBuffer.ServerQueueItemPB.internal__static_ProtoBuffer_PathPlanningRequest_Matrix__FieldAccessorTable; }
        }
        
        public const int RowFieldNumber = 1;
        private pbc::PopsicleList<global::ProtoBuffer.PathPlanningRequest.Types.MatrixRow> row_ = new pbc::PopsicleList<global::ProtoBuffer.PathPlanningRequest.Types.MatrixRow>();
        public scg::IList<global::ProtoBuffer.PathPlanningRequest.Types.MatrixRow> RowList {
          get { return row_; }
        }
        public int RowCount {
          get { return row_.Count; }
        }
        public global::ProtoBuffer.PathPlanningRequest.Types.MatrixRow GetRow(int index) {
          return row_[index];
        }
        
        public override bool IsInitialized {
          get {
            return true;
          }
        }
        
        public override void WriteTo(pb::ICodedOutputStream output) {
          int size = SerializedSize;
          string[] field_names = _matrixFieldNames;
          if (row_.Count > 0) {
            output.WriteMessageArray(1, field_names[0], row_);
          }
          UnknownFields.WriteTo(output);
        }
        
        private int memoizedSerializedSize = -1;
        public override int SerializedSize {
          get {
            int size = memoizedSerializedSize;
            if (size != -1) return size;
            
            size = 0;
            foreach (global::ProtoBuffer.PathPlanningRequest.Types.MatrixRow element in RowList) {
              size += pb::CodedOutputStream.ComputeMessageSize(1, element);
            }
            size += UnknownFields.SerializedSize;
            memoizedSerializedSize = size;
            return size;
          }
        }
        
        public static Matrix ParseFrom(pb::ByteString data) {
          return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
        }
        public static Matrix ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
          return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
        }
        public static Matrix ParseFrom(byte[] data) {
          return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
        }
        public static Matrix ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
          return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
        }
        public static Matrix ParseFrom(global::System.IO.Stream input) {
          return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
        }
        public static Matrix ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
          return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
        }
        public static Matrix ParseDelimitedFrom(global::System.IO.Stream input) {
          return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
        }
        public static Matrix ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
          return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
        }
        public static Matrix ParseFrom(pb::ICodedInputStream input) {
          return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
        }
        public static Matrix ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
          return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
        }
        private Matrix MakeReadOnly() {
          row_.MakeReadOnly();
          return this;
        }
        
        public static Builder CreateBuilder() { return new Builder(); }
        public override Builder ToBuilder() { return CreateBuilder(this); }
        public override Builder CreateBuilderForType() { return new Builder(); }
        public static Builder CreateBuilder(Matrix prototype) {
          return new Builder(prototype);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ProtoGen", "2.4.1.473")]
        public sealed partial class Builder : pb::GeneratedBuilder<Matrix, Builder> {
          protected override Builder ThisBuilder {
            get { return this; }
          }
          public Builder() {
            result = DefaultInstance;
            resultIsReadOnly = true;
          }
          internal Builder(Matrix cloneFrom) {
            result = cloneFrom;
            resultIsReadOnly = true;
          }
          
          private bool resultIsReadOnly;
          private Matrix result;
          
          private Matrix PrepareBuilder() {
            if (resultIsReadOnly) {
              Matrix original = result;
              result = new Matrix();
              resultIsReadOnly = false;
              MergeFrom(original);
            }
            return result;
          }
          
          public override bool IsInitialized {
            get { return result.IsInitialized; }
          }
          
          protected override Matrix MessageBeingBuilt {
            get { return PrepareBuilder(); }
          }
          
          public override Builder Clear() {
            result = DefaultInstance;
            resultIsReadOnly = true;
            return this;
          }
          
          public override Builder Clone() {
            if (resultIsReadOnly) {
              return new Builder(result);
            } else {
              return new Builder().MergeFrom(result);
            }
          }
          
          public override pbd::MessageDescriptor DescriptorForType {
            get { return global::ProtoBuffer.PathPlanningRequest.Types.Matrix.Descriptor; }
          }
          
          public override Matrix DefaultInstanceForType {
            get { return global::ProtoBuffer.PathPlanningRequest.Types.Matrix.DefaultInstance; }
          }
          
          public override Matrix BuildPartial() {
            if (resultIsReadOnly) {
              return result;
            }
            resultIsReadOnly = true;
            return result.MakeReadOnly();
          }
          
          public override Builder MergeFrom(pb::IMessage other) {
            if (other is Matrix) {
              return MergeFrom((Matrix) other);
            } else {
              base.MergeFrom(other);
              return this;
            }
          }
          
          public override Builder MergeFrom(Matrix other) {
            if (other == global::ProtoBuffer.PathPlanningRequest.Types.Matrix.DefaultInstance) return this;
            PrepareBuilder();
            if (other.row_.Count != 0) {
              result.row_.Add(other.row_);
            }
            this.MergeUnknownFields(other.UnknownFields);
            return this;
          }
          
          public override Builder MergeFrom(pb::ICodedInputStream input) {
            return MergeFrom(input, pb::ExtensionRegistry.Empty);
          }
          
          public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
            PrepareBuilder();
            pb::UnknownFieldSet.Builder unknownFields = null;
            uint tag;
            string field_name;
            while (input.ReadTag(out tag, out field_name)) {
              if(tag == 0 && field_name != null) {
                int field_ordinal = global::System.Array.BinarySearch(_matrixFieldNames, field_name, global::System.StringComparer.Ordinal);
                if(field_ordinal >= 0)
                  tag = _matrixFieldTags[field_ordinal];
                else {
                  if (unknownFields == null) {
                    unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
                  }
                  ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
                  continue;
                }
              }
              switch (tag) {
                case 0: {
                  throw pb::InvalidProtocolBufferException.InvalidTag();
                }
                default: {
                  if (pb::WireFormat.IsEndGroupTag(tag)) {
                    if (unknownFields != null) {
                      this.UnknownFields = unknownFields.Build();
                    }
                    return this;
                  }
                  if (unknownFields == null) {
                    unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
                  }
                  ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
                  break;
                }
                case 10: {
                  input.ReadMessageArray(tag, field_name, result.row_, global::ProtoBuffer.PathPlanningRequest.Types.MatrixRow.DefaultInstance, extensionRegistry);
                  break;
                }
              }
            }
            
            if (unknownFields != null) {
              this.UnknownFields = unknownFields.Build();
            }
            return this;
          }
          
          
          public pbc::IPopsicleList<global::ProtoBuffer.PathPlanningRequest.Types.MatrixRow> RowList {
            get { return PrepareBuilder().row_; }
          }
          public int RowCount {
            get { return result.RowCount; }
          }
          public global::ProtoBuffer.PathPlanningRequest.Types.MatrixRow GetRow(int index) {
            return result.GetRow(index);
          }
          public Builder SetRow(int index, global::ProtoBuffer.PathPlanningRequest.Types.MatrixRow value) {
            pb::ThrowHelper.ThrowIfNull(value, "value");
            PrepareBuilder();
            result.row_[index] = value;
            return this;
          }
          public Builder SetRow(int index, global::ProtoBuffer.PathPlanningRequest.Types.MatrixRow.Builder builderForValue) {
            pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
            PrepareBuilder();
            result.row_[index] = builderForValue.Build();
            return this;
          }
          public Builder AddRow(global::ProtoBuffer.PathPlanningRequest.Types.MatrixRow value) {
            pb::ThrowHelper.ThrowIfNull(value, "value");
            PrepareBuilder();
            result.row_.Add(value);
            return this;
          }
          public Builder AddRow(global::ProtoBuffer.PathPlanningRequest.Types.MatrixRow.Builder builderForValue) {
            pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
            PrepareBuilder();
            result.row_.Add(builderForValue.Build());
            return this;
          }
          public Builder AddRangeRow(scg::IEnumerable<global::ProtoBuffer.PathPlanningRequest.Types.MatrixRow> values) {
            PrepareBuilder();
            result.row_.Add(values);
            return this;
          }
          public Builder ClearRow() {
            PrepareBuilder();
            result.row_.Clear();
            return this;
          }
        }
        static Matrix() {
          object.ReferenceEquals(global::ProtoBuffer.ServerQueueItemPB.Descriptor, null);
        }
      }
      
      [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
      [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
      [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ProtoGen", "2.4.1.473")]
      public sealed partial class DistPoint : pb::GeneratedMessage<DistPoint, DistPoint.Builder> {
        private DistPoint() { }
        private static readonly DistPoint defaultInstance = new DistPoint().MakeReadOnly();
        private static readonly string[] _distPointFieldNames = new string[] { "column", "row" };
        private static readonly uint[] _distPointFieldTags = new uint[] { 16, 8 };
        public static DistPoint DefaultInstance {
          get { return defaultInstance; }
        }
        
        public override DistPoint DefaultInstanceForType {
          get { return DefaultInstance; }
        }
        
        protected override DistPoint ThisMessage {
          get { return this; }
        }
        
        public static pbd::MessageDescriptor Descriptor {
          get { return global::ProtoBuffer.ServerQueueItemPB.internal__static_ProtoBuffer_PathPlanningRequest_DistPoint__Descriptor; }
        }
        
        protected override pb::FieldAccess.FieldAccessorTable<DistPoint, DistPoint.Builder> InternalFieldAccessors {
          get { return global::ProtoBuffer.ServerQueueItemPB.internal__static_ProtoBuffer_PathPlanningRequest_DistPoint__FieldAccessorTable; }
        }
        
        public const int RowFieldNumber = 1;
        private bool hasRow;
        private int row_;
        public bool HasRow {
          get { return hasRow; }
        }
        public int Row {
          get { return row_; }
        }
        
        public const int ColumnFieldNumber = 2;
        private bool hasColumn;
        private int column_;
        public bool HasColumn {
          get { return hasColumn; }
        }
        public int Column {
          get { return column_; }
        }
        
        public override bool IsInitialized {
          get {
            return true;
          }
        }
        
        public override void WriteTo(pb::ICodedOutputStream output) {
          int size = SerializedSize;
          string[] field_names = _distPointFieldNames;
          if (hasRow) {
            output.WriteInt32(1, field_names[1], Row);
          }
          if (hasColumn) {
            output.WriteInt32(2, field_names[0], Column);
          }
          UnknownFields.WriteTo(output);
        }
        
        private int memoizedSerializedSize = -1;
        public override int SerializedSize {
          get {
            int size = memoizedSerializedSize;
            if (size != -1) return size;
            
            size = 0;
            if (hasRow) {
              size += pb::CodedOutputStream.ComputeInt32Size(1, Row);
            }
            if (hasColumn) {
              size += pb::CodedOutputStream.ComputeInt32Size(2, Column);
            }
            size += UnknownFields.SerializedSize;
            memoizedSerializedSize = size;
            return size;
          }
        }
        
        public static DistPoint ParseFrom(pb::ByteString data) {
          return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
        }
        public static DistPoint ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
          return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
        }
        public static DistPoint ParseFrom(byte[] data) {
          return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
        }
        public static DistPoint ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
          return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
        }
        public static DistPoint ParseFrom(global::System.IO.Stream input) {
          return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
        }
        public static DistPoint ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
          return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
        }
        public static DistPoint ParseDelimitedFrom(global::System.IO.Stream input) {
          return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
        }
        public static DistPoint ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
          return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
        }
        public static DistPoint ParseFrom(pb::ICodedInputStream input) {
          return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
        }
        public static DistPoint ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
          return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
        }
        private DistPoint MakeReadOnly() {
          return this;
        }
        
        public static Builder CreateBuilder() { return new Builder(); }
        public override Builder ToBuilder() { return CreateBuilder(this); }
        public override Builder CreateBuilderForType() { return new Builder(); }
        public static Builder CreateBuilder(DistPoint prototype) {
          return new Builder(prototype);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ProtoGen", "2.4.1.473")]
        public sealed partial class Builder : pb::GeneratedBuilder<DistPoint, Builder> {
          protected override Builder ThisBuilder {
            get { return this; }
          }
          public Builder() {
            result = DefaultInstance;
            resultIsReadOnly = true;
          }
          internal Builder(DistPoint cloneFrom) {
            result = cloneFrom;
            resultIsReadOnly = true;
          }
          
          private bool resultIsReadOnly;
          private DistPoint result;
          
          private DistPoint PrepareBuilder() {
            if (resultIsReadOnly) {
              DistPoint original = result;
              result = new DistPoint();
              resultIsReadOnly = false;
              MergeFrom(original);
            }
            return result;
          }
          
          public override bool IsInitialized {
            get { return result.IsInitialized; }
          }
          
          protected override DistPoint MessageBeingBuilt {
            get { return PrepareBuilder(); }
          }
          
          public override Builder Clear() {
            result = DefaultInstance;
            resultIsReadOnly = true;
            return this;
          }
          
          public override Builder Clone() {
            if (resultIsReadOnly) {
              return new Builder(result);
            } else {
              return new Builder().MergeFrom(result);
            }
          }
          
          public override pbd::MessageDescriptor DescriptorForType {
            get { return global::ProtoBuffer.PathPlanningRequest.Types.DistPoint.Descriptor; }
          }
          
          public override DistPoint DefaultInstanceForType {
            get { return global::ProtoBuffer.PathPlanningRequest.Types.DistPoint.DefaultInstance; }
          }
          
          public override DistPoint BuildPartial() {
            if (resultIsReadOnly) {
              return result;
            }
            resultIsReadOnly = true;
            return result.MakeReadOnly();
          }
          
          public override Builder MergeFrom(pb::IMessage other) {
            if (other is DistPoint) {
              return MergeFrom((DistPoint) other);
            } else {
              base.MergeFrom(other);
              return this;
            }
          }
          
          public override Builder MergeFrom(DistPoint other) {
            if (other == global::ProtoBuffer.PathPlanningRequest.Types.DistPoint.DefaultInstance) return this;
            PrepareBuilder();
            if (other.HasRow) {
              Row = other.Row;
            }
            if (other.HasColumn) {
              Column = other.Column;
            }
            this.MergeUnknownFields(other.UnknownFields);
            return this;
          }
          
          public override Builder MergeFrom(pb::ICodedInputStream input) {
            return MergeFrom(input, pb::ExtensionRegistry.Empty);
          }
          
          public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
            PrepareBuilder();
            pb::UnknownFieldSet.Builder unknownFields = null;
            uint tag;
            string field_name;
            while (input.ReadTag(out tag, out field_name)) {
              if(tag == 0 && field_name != null) {
                int field_ordinal = global::System.Array.BinarySearch(_distPointFieldNames, field_name, global::System.StringComparer.Ordinal);
                if(field_ordinal >= 0)
                  tag = _distPointFieldTags[field_ordinal];
                else {
                  if (unknownFields == null) {
                    unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
                  }
                  ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
                  continue;
                }
              }
              switch (tag) {
                case 0: {
                  throw pb::InvalidProtocolBufferException.InvalidTag();
                }
                default: {
                  if (pb::WireFormat.IsEndGroupTag(tag)) {
                    if (unknownFields != null) {
                      this.UnknownFields = unknownFields.Build();
                    }
                    return this;
                  }
                  if (unknownFields == null) {
                    unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
                  }
                  ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
                  break;
                }
                case 8: {
                  result.hasRow = input.ReadInt32(ref result.row_);
                  break;
                }
                case 16: {
                  result.hasColumn = input.ReadInt32(ref result.column_);
                  break;
                }
              }
            }
            
            if (unknownFields != null) {
              this.UnknownFields = unknownFields.Build();
            }
            return this;
          }
          
          
          public bool HasRow {
            get { return result.hasRow; }
          }
          public int Row {
            get { return result.Row; }
            set { SetRow(value); }
          }
          public Builder SetRow(int value) {
            PrepareBuilder();
            result.hasRow = true;
            result.row_ = value;
            return this;
          }
          public Builder ClearRow() {
            PrepareBuilder();
            result.hasRow = false;
            result.row_ = 0;
            return this;
          }
          
          public bool HasColumn {
            get { return result.hasColumn; }
          }
          public int Column {
            get { return result.Column; }
            set { SetColumn(value); }
          }
          public Builder SetColumn(int value) {
            PrepareBuilder();
            result.hasColumn = true;
            result.column_ = value;
            return this;
          }
          public Builder ClearColumn() {
            PrepareBuilder();
            result.hasColumn = false;
            result.column_ = 0;
            return this;
          }
        }
        static DistPoint() {
          object.ReferenceEquals(global::ProtoBuffer.ServerQueueItemPB.Descriptor, null);
        }
      }
      
    }
    #endregion
    
    public const int UseDistributionMapFieldNumber = 1;
    private bool hasUseDistributionMap;
    private bool useDistributionMap_ = true;
    public bool HasUseDistributionMap {
      get { return hasUseDistributionMap; }
    }
    public bool UseDistributionMap {
      get { return useDistributionMap_; }
    }
    
    public const int UseTaskDifficultyMapFieldNumber = 2;
    private bool hasUseTaskDifficultyMap;
    private bool useTaskDifficultyMap_ = true;
    public bool HasUseTaskDifficultyMap {
      get { return hasUseTaskDifficultyMap; }
    }
    public bool UseTaskDifficultyMap {
      get { return useTaskDifficultyMap_; }
    }
    
    public const int UseHierarchyFieldNumber = 3;
    private bool hasUseHierarchy;
    private bool useHierarchy_ = true;
    public bool HasUseHierarchy {
      get { return hasUseHierarchy; }
    }
    public bool UseHierarchy {
      get { return useHierarchy_; }
    }
    
    public const int UseCoarseToFineSearchFieldNumber = 4;
    private bool hasUseCoarseToFineSearch;
    private bool useCoarseToFineSearch_ = true;
    public bool HasUseCoarseToFineSearch {
      get { return hasUseCoarseToFineSearch; }
    }
    public bool UseCoarseToFineSearch {
      get { return useCoarseToFineSearch_; }
    }
    
    public const int UseParallelProcessingFieldNumber = 5;
    private bool hasUseParallelProcessing;
    private bool useParallelProcessing_ = true;
    public bool HasUseParallelProcessing {
      get { return hasUseParallelProcessing; }
    }
    public bool UseParallelProcessing {
      get { return useParallelProcessing_; }
    }
    
    public const int VehicleTypeFieldNumber = 6;
    private bool hasVehicleType;
    private global::ProtoBuffer.PathPlanningRequest.Types.UAVType vehicleType_ = global::ProtoBuffer.PathPlanningRequest.Types.UAVType.Copter;
    public bool HasVehicleType {
      get { return hasVehicleType; }
    }
    public global::ProtoBuffer.PathPlanningRequest.Types.UAVType VehicleType {
      get { return vehicleType_; }
    }
    
    public const int DetectionTypeFieldNumber = 7;
    private bool hasDetectionType;
    private global::ProtoBuffer.PathPlanningRequest.Types.DType detectionType_ = global::ProtoBuffer.PathPlanningRequest.Types.DType.FixAmountInPercentage;
    public bool HasDetectionType {
      get { return hasDetectionType; }
    }
    public global::ProtoBuffer.PathPlanningRequest.Types.DType DetectionType {
      get { return detectionType_; }
    }
    
    public const int DetectionRateFieldNumber = 8;
    private bool hasDetectionRate;
    private double detectionRate_ = 1D;
    public bool HasDetectionRate {
      get { return hasDetectionRate; }
    }
    public double DetectionRate {
      get { return detectionRate_; }
    }
    
    public const int DistMapFieldNumber = 9;
    private bool hasDistMap;
    private global::ProtoBuffer.PathPlanningRequest.Types.Matrix distMap_;
    public bool HasDistMap {
      get { return hasDistMap; }
    }
    public global::ProtoBuffer.PathPlanningRequest.Types.Matrix DistMap {
      get { return distMap_ ?? global::ProtoBuffer.PathPlanningRequest.Types.Matrix.DefaultInstance; }
    }
    
    public const int DiffMapFieldNumber = 10;
    private bool hasDiffMap;
    private global::ProtoBuffer.PathPlanningRequest.Types.Matrix diffMap_;
    public bool HasDiffMap {
      get { return hasDiffMap; }
    }
    public global::ProtoBuffer.PathPlanningRequest.Types.Matrix DiffMap {
      get { return diffMap_ ?? global::ProtoBuffer.PathPlanningRequest.Types.Matrix.DefaultInstance; }
    }
    
    public const int UseEndPointFieldNumber = 11;
    private bool hasUseEndPoint;
    private bool useEndPoint_;
    public bool HasUseEndPoint {
      get { return hasUseEndPoint; }
    }
    public bool UseEndPoint {
      get { return useEndPoint_; }
    }
    
    public const int TFieldNumber = 12;
    private bool hasT;
    private int t_ = 600;
    public bool HasT {
      get { return hasT; }
    }
    public int T {
      get { return t_; }
    }
    
    public const int PStartFieldNumber = 13;
    private bool hasPStart;
    private global::ProtoBuffer.PathPlanningRequest.Types.DistPoint pStart_;
    public bool HasPStart {
      get { return hasPStart; }
    }
    public global::ProtoBuffer.PathPlanningRequest.Types.DistPoint PStart {
      get { return pStart_ ?? global::ProtoBuffer.PathPlanningRequest.Types.DistPoint.DefaultInstance; }
    }
    
    public const int PEndFieldNumber = 14;
    private bool hasPEnd;
    private global::ProtoBuffer.PathPlanningRequest.Types.DistPoint pEnd_;
    public bool HasPEnd {
      get { return hasPEnd; }
    }
    public global::ProtoBuffer.PathPlanningRequest.Types.DistPoint PEnd {
      get { return pEnd_ ?? global::ProtoBuffer.PathPlanningRequest.Types.DistPoint.DefaultInstance; }
    }
    
    public const int AlgToUseFieldNumber = 15;
    private bool hasAlgToUse;
    private global::ProtoBuffer.PathPlanningRequest.Types.AlgType algToUse_ = global::ProtoBuffer.PathPlanningRequest.Types.AlgType.REALTIME;
    public bool HasAlgToUse {
      get { return hasAlgToUse; }
    }
    public global::ProtoBuffer.PathPlanningRequest.Types.AlgType AlgToUse {
      get { return algToUse_; }
    }
    
    public const int BatchRunFieldNumber = 16;
    private bool hasBatchRun;
    private bool batchRun_;
    public bool HasBatchRun {
      get { return hasBatchRun; }
    }
    public bool BatchRun {
      get { return batchRun_; }
    }
    
    public const int RunTimesFieldNumber = 17;
    private bool hasRunTimes;
    private int runTimes_ = 10;
    public bool HasRunTimes {
      get { return hasRunTimes; }
    }
    public int RunTimes {
      get { return runTimes_; }
    }
    
    public const int MaxDifficultyFieldNumber = 18;
    private bool hasMaxDifficulty;
    private int maxDifficulty_ = 3;
    public bool HasMaxDifficulty {
      get { return hasMaxDifficulty; }
    }
    public int MaxDifficulty {
      get { return maxDifficulty_; }
    }
    
    public const int DiffRateFieldNumber = 19;
    private pbc::PopsicleList<double> diffRate_ = new pbc::PopsicleList<double>();
    public scg::IList<double> DiffRateList {
      get { return pbc::Lists.AsReadOnly(diffRate_); }
    }
    public int DiffRateCount {
      get { return diffRate_.Count; }
    }
    public double GetDiffRate(int index) {
      return diffRate_[index];
    }
    
    public const int DrawPathFieldNumber = 20;
    private bool hasDrawPath;
    private bool drawPath_;
    public bool HasDrawPath {
      get { return hasDrawPath; }
    }
    public bool DrawPath {
      get { return drawPath_; }
    }
    
    public const int DFieldNumber = 21;
    private bool hasD;
    private int d_;
    public bool HasD {
      get { return hasD; }
    }
    public int D {
      get { return d_; }
    }
    
    public const int TopNCountFieldNumber = 22;
    private bool hasTopNCount;
    private int topNCount_ = 3;
    public bool HasTopNCount {
      get { return hasTopNCount; }
    }
    public int TopNCount {
      get { return topNCount_; }
    }
    
    public override bool IsInitialized {
      get {
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      int size = SerializedSize;
      string[] field_names = _pathPlanningRequestFieldNames;
      if (hasUseDistributionMap) {
        output.WriteBool(1, field_names[13], UseDistributionMap);
      }
      if (hasUseTaskDifficultyMap) {
        output.WriteBool(2, field_names[17], UseTaskDifficultyMap);
      }
      if (hasUseHierarchy) {
        output.WriteBool(3, field_names[15], UseHierarchy);
      }
      if (hasUseCoarseToFineSearch) {
        output.WriteBool(4, field_names[12], UseCoarseToFineSearch);
      }
      if (hasUseParallelProcessing) {
        output.WriteBool(5, field_names[16], UseParallelProcessing);
      }
      if (hasVehicleType) {
        output.WriteEnum(6, field_names[18], (int) VehicleType, VehicleType);
      }
      if (hasDetectionType) {
        output.WriteEnum(7, field_names[3], (int) DetectionType, DetectionType);
      }
      if (hasDetectionRate) {
        output.WriteDouble(8, field_names[2], DetectionRate);
      }
      if (hasDistMap) {
        output.WriteMessage(9, field_names[6], DistMap);
      }
      if (hasDiffMap) {
        output.WriteMessage(10, field_names[4], DiffMap);
      }
      if (hasUseEndPoint) {
        output.WriteBool(11, field_names[14], UseEndPoint);
      }
      if (hasT) {
        output.WriteInt32(12, field_names[10], T);
      }
      if (hasPStart) {
        output.WriteMessage(13, field_names[21], PStart);
      }
      if (hasPEnd) {
        output.WriteMessage(14, field_names[20], PEnd);
      }
      if (hasAlgToUse) {
        output.WriteEnum(15, field_names[0], (int) AlgToUse, AlgToUse);
      }
      if (hasBatchRun) {
        output.WriteBool(16, field_names[1], BatchRun);
      }
      if (hasRunTimes) {
        output.WriteInt32(17, field_names[9], RunTimes);
      }
      if (hasMaxDifficulty) {
        output.WriteInt32(18, field_names[8], MaxDifficulty);
      }
      if (diffRate_.Count > 0) {
        output.WriteDoubleArray(19, field_names[5], diffRate_);
      }
      if (hasDrawPath) {
        output.WriteBool(20, field_names[7], DrawPath);
      }
      if (hasD) {
        output.WriteInt32(21, field_names[19], D);
      }
      if (hasTopNCount) {
        output.WriteInt32(22, field_names[11], TopNCount);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        
        size = 0;
        if (hasUseDistributionMap) {
          size += pb::CodedOutputStream.ComputeBoolSize(1, UseDistributionMap);
        }
        if (hasUseTaskDifficultyMap) {
          size += pb::CodedOutputStream.ComputeBoolSize(2, UseTaskDifficultyMap);
        }
        if (hasUseHierarchy) {
          size += pb::CodedOutputStream.ComputeBoolSize(3, UseHierarchy);
        }
        if (hasUseCoarseToFineSearch) {
          size += pb::CodedOutputStream.ComputeBoolSize(4, UseCoarseToFineSearch);
        }
        if (hasUseParallelProcessing) {
          size += pb::CodedOutputStream.ComputeBoolSize(5, UseParallelProcessing);
        }
        if (hasVehicleType) {
          size += pb::CodedOutputStream.ComputeEnumSize(6, (int) VehicleType);
        }
        if (hasDetectionType) {
          size += pb::CodedOutputStream.ComputeEnumSize(7, (int) DetectionType);
        }
        if (hasDetectionRate) {
          size += pb::CodedOutputStream.ComputeDoubleSize(8, DetectionRate);
        }
        if (hasDistMap) {
          size += pb::CodedOutputStream.ComputeMessageSize(9, DistMap);
        }
        if (hasDiffMap) {
          size += pb::CodedOutputStream.ComputeMessageSize(10, DiffMap);
        }
        if (hasUseEndPoint) {
          size += pb::CodedOutputStream.ComputeBoolSize(11, UseEndPoint);
        }
        if (hasT) {
          size += pb::CodedOutputStream.ComputeInt32Size(12, T);
        }
        if (hasPStart) {
          size += pb::CodedOutputStream.ComputeMessageSize(13, PStart);
        }
        if (hasPEnd) {
          size += pb::CodedOutputStream.ComputeMessageSize(14, PEnd);
        }
        if (hasAlgToUse) {
          size += pb::CodedOutputStream.ComputeEnumSize(15, (int) AlgToUse);
        }
        if (hasBatchRun) {
          size += pb::CodedOutputStream.ComputeBoolSize(16, BatchRun);
        }
        if (hasRunTimes) {
          size += pb::CodedOutputStream.ComputeInt32Size(17, RunTimes);
        }
        if (hasMaxDifficulty) {
          size += pb::CodedOutputStream.ComputeInt32Size(18, MaxDifficulty);
        }
        {
          int dataSize = 0;
          dataSize = 8 * diffRate_.Count;
          size += dataSize;
          size += 2 * diffRate_.Count;
        }
        if (hasDrawPath) {
          size += pb::CodedOutputStream.ComputeBoolSize(20, DrawPath);
        }
        if (hasD) {
          size += pb::CodedOutputStream.ComputeInt32Size(21, D);
        }
        if (hasTopNCount) {
          size += pb::CodedOutputStream.ComputeInt32Size(22, TopNCount);
        }
        size += UnknownFields.SerializedSize;
        memoizedSerializedSize = size;
        return size;
      }
    }
    
    public static PathPlanningRequest ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static PathPlanningRequest ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static PathPlanningRequest ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static PathPlanningRequest ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static PathPlanningRequest ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static PathPlanningRequest ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static PathPlanningRequest ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static PathPlanningRequest ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static PathPlanningRequest ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static PathPlanningRequest ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private PathPlanningRequest MakeReadOnly() {
      diffRate_.MakeReadOnly();
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(PathPlanningRequest prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ProtoGen", "2.4.1.473")]
    public sealed partial class Builder : pb::GeneratedBuilder<PathPlanningRequest, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(PathPlanningRequest cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private PathPlanningRequest result;
      
      private PathPlanningRequest PrepareBuilder() {
        if (resultIsReadOnly) {
          PathPlanningRequest original = result;
          result = new PathPlanningRequest();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override PathPlanningRequest MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::ProtoBuffer.PathPlanningRequest.Descriptor; }
      }
      
      public override PathPlanningRequest DefaultInstanceForType {
        get { return global::ProtoBuffer.PathPlanningRequest.DefaultInstance; }
      }
      
      public override PathPlanningRequest BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is PathPlanningRequest) {
          return MergeFrom((PathPlanningRequest) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(PathPlanningRequest other) {
        if (other == global::ProtoBuffer.PathPlanningRequest.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasUseDistributionMap) {
          UseDistributionMap = other.UseDistributionMap;
        }
        if (other.HasUseTaskDifficultyMap) {
          UseTaskDifficultyMap = other.UseTaskDifficultyMap;
        }
        if (other.HasUseHierarchy) {
          UseHierarchy = other.UseHierarchy;
        }
        if (other.HasUseCoarseToFineSearch) {
          UseCoarseToFineSearch = other.UseCoarseToFineSearch;
        }
        if (other.HasUseParallelProcessing) {
          UseParallelProcessing = other.UseParallelProcessing;
        }
        if (other.HasVehicleType) {
          VehicleType = other.VehicleType;
        }
        if (other.HasDetectionType) {
          DetectionType = other.DetectionType;
        }
        if (other.HasDetectionRate) {
          DetectionRate = other.DetectionRate;
        }
        if (other.HasDistMap) {
          MergeDistMap(other.DistMap);
        }
        if (other.HasDiffMap) {
          MergeDiffMap(other.DiffMap);
        }
        if (other.HasUseEndPoint) {
          UseEndPoint = other.UseEndPoint;
        }
        if (other.HasT) {
          T = other.T;
        }
        if (other.HasPStart) {
          MergePStart(other.PStart);
        }
        if (other.HasPEnd) {
          MergePEnd(other.PEnd);
        }
        if (other.HasAlgToUse) {
          AlgToUse = other.AlgToUse;
        }
        if (other.HasBatchRun) {
          BatchRun = other.BatchRun;
        }
        if (other.HasRunTimes) {
          RunTimes = other.RunTimes;
        }
        if (other.HasMaxDifficulty) {
          MaxDifficulty = other.MaxDifficulty;
        }
        if (other.diffRate_.Count != 0) {
          result.diffRate_.Add(other.diffRate_);
        }
        if (other.HasDrawPath) {
          DrawPath = other.DrawPath;
        }
        if (other.HasD) {
          D = other.D;
        }
        if (other.HasTopNCount) {
          TopNCount = other.TopNCount;
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_pathPlanningRequestFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _pathPlanningRequestFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 8: {
              result.hasUseDistributionMap = input.ReadBool(ref result.useDistributionMap_);
              break;
            }
            case 16: {
              result.hasUseTaskDifficultyMap = input.ReadBool(ref result.useTaskDifficultyMap_);
              break;
            }
            case 24: {
              result.hasUseHierarchy = input.ReadBool(ref result.useHierarchy_);
              break;
            }
            case 32: {
              result.hasUseCoarseToFineSearch = input.ReadBool(ref result.useCoarseToFineSearch_);
              break;
            }
            case 40: {
              result.hasUseParallelProcessing = input.ReadBool(ref result.useParallelProcessing_);
              break;
            }
            case 48: {
              object unknown;
              if(input.ReadEnum(ref result.vehicleType_, out unknown)) {
                result.hasVehicleType = true;
              } else if(unknown is int) {
                if (unknownFields == null) {
                  unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
                }
                unknownFields.MergeVarintField(6, (ulong)(int)unknown);
              }
              break;
            }
            case 56: {
              object unknown;
              if(input.ReadEnum(ref result.detectionType_, out unknown)) {
                result.hasDetectionType = true;
              } else if(unknown is int) {
                if (unknownFields == null) {
                  unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
                }
                unknownFields.MergeVarintField(7, (ulong)(int)unknown);
              }
              break;
            }
            case 65: {
              result.hasDetectionRate = input.ReadDouble(ref result.detectionRate_);
              break;
            }
            case 74: {
              global::ProtoBuffer.PathPlanningRequest.Types.Matrix.Builder subBuilder = global::ProtoBuffer.PathPlanningRequest.Types.Matrix.CreateBuilder();
              if (result.hasDistMap) {
                subBuilder.MergeFrom(DistMap);
              }
              input.ReadMessage(subBuilder, extensionRegistry);
              DistMap = subBuilder.BuildPartial();
              break;
            }
            case 82: {
              global::ProtoBuffer.PathPlanningRequest.Types.Matrix.Builder subBuilder = global::ProtoBuffer.PathPlanningRequest.Types.Matrix.CreateBuilder();
              if (result.hasDiffMap) {
                subBuilder.MergeFrom(DiffMap);
              }
              input.ReadMessage(subBuilder, extensionRegistry);
              DiffMap = subBuilder.BuildPartial();
              break;
            }
            case 88: {
              result.hasUseEndPoint = input.ReadBool(ref result.useEndPoint_);
              break;
            }
            case 96: {
              result.hasT = input.ReadInt32(ref result.t_);
              break;
            }
            case 106: {
              global::ProtoBuffer.PathPlanningRequest.Types.DistPoint.Builder subBuilder = global::ProtoBuffer.PathPlanningRequest.Types.DistPoint.CreateBuilder();
              if (result.hasPStart) {
                subBuilder.MergeFrom(PStart);
              }
              input.ReadMessage(subBuilder, extensionRegistry);
              PStart = subBuilder.BuildPartial();
              break;
            }
            case 114: {
              global::ProtoBuffer.PathPlanningRequest.Types.DistPoint.Builder subBuilder = global::ProtoBuffer.PathPlanningRequest.Types.DistPoint.CreateBuilder();
              if (result.hasPEnd) {
                subBuilder.MergeFrom(PEnd);
              }
              input.ReadMessage(subBuilder, extensionRegistry);
              PEnd = subBuilder.BuildPartial();
              break;
            }
            case 120: {
              object unknown;
              if(input.ReadEnum(ref result.algToUse_, out unknown)) {
                result.hasAlgToUse = true;
              } else if(unknown is int) {
                if (unknownFields == null) {
                  unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
                }
                unknownFields.MergeVarintField(15, (ulong)(int)unknown);
              }
              break;
            }
            case 128: {
              result.hasBatchRun = input.ReadBool(ref result.batchRun_);
              break;
            }
            case 136: {
              result.hasRunTimes = input.ReadInt32(ref result.runTimes_);
              break;
            }
            case 144: {
              result.hasMaxDifficulty = input.ReadInt32(ref result.maxDifficulty_);
              break;
            }
            case 154:
            case 153: {
              input.ReadDoubleArray(tag, field_name, result.diffRate_);
              break;
            }
            case 160: {
              result.hasDrawPath = input.ReadBool(ref result.drawPath_);
              break;
            }
            case 168: {
              result.hasD = input.ReadInt32(ref result.d_);
              break;
            }
            case 176: {
              result.hasTopNCount = input.ReadInt32(ref result.topNCount_);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasUseDistributionMap {
        get { return result.hasUseDistributionMap; }
      }
      public bool UseDistributionMap {
        get { return result.UseDistributionMap; }
        set { SetUseDistributionMap(value); }
      }
      public Builder SetUseDistributionMap(bool value) {
        PrepareBuilder();
        result.hasUseDistributionMap = true;
        result.useDistributionMap_ = value;
        return this;
      }
      public Builder ClearUseDistributionMap() {
        PrepareBuilder();
        result.hasUseDistributionMap = false;
        result.useDistributionMap_ = true;
        return this;
      }
      
      public bool HasUseTaskDifficultyMap {
        get { return result.hasUseTaskDifficultyMap; }
      }
      public bool UseTaskDifficultyMap {
        get { return result.UseTaskDifficultyMap; }
        set { SetUseTaskDifficultyMap(value); }
      }
      public Builder SetUseTaskDifficultyMap(bool value) {
        PrepareBuilder();
        result.hasUseTaskDifficultyMap = true;
        result.useTaskDifficultyMap_ = value;
        return this;
      }
      public Builder ClearUseTaskDifficultyMap() {
        PrepareBuilder();
        result.hasUseTaskDifficultyMap = false;
        result.useTaskDifficultyMap_ = true;
        return this;
      }
      
      public bool HasUseHierarchy {
        get { return result.hasUseHierarchy; }
      }
      public bool UseHierarchy {
        get { return result.UseHierarchy; }
        set { SetUseHierarchy(value); }
      }
      public Builder SetUseHierarchy(bool value) {
        PrepareBuilder();
        result.hasUseHierarchy = true;
        result.useHierarchy_ = value;
        return this;
      }
      public Builder ClearUseHierarchy() {
        PrepareBuilder();
        result.hasUseHierarchy = false;
        result.useHierarchy_ = true;
        return this;
      }
      
      public bool HasUseCoarseToFineSearch {
        get { return result.hasUseCoarseToFineSearch; }
      }
      public bool UseCoarseToFineSearch {
        get { return result.UseCoarseToFineSearch; }
        set { SetUseCoarseToFineSearch(value); }
      }
      public Builder SetUseCoarseToFineSearch(bool value) {
        PrepareBuilder();
        result.hasUseCoarseToFineSearch = true;
        result.useCoarseToFineSearch_ = value;
        return this;
      }
      public Builder ClearUseCoarseToFineSearch() {
        PrepareBuilder();
        result.hasUseCoarseToFineSearch = false;
        result.useCoarseToFineSearch_ = true;
        return this;
      }
      
      public bool HasUseParallelProcessing {
        get { return result.hasUseParallelProcessing; }
      }
      public bool UseParallelProcessing {
        get { return result.UseParallelProcessing; }
        set { SetUseParallelProcessing(value); }
      }
      public Builder SetUseParallelProcessing(bool value) {
        PrepareBuilder();
        result.hasUseParallelProcessing = true;
        result.useParallelProcessing_ = value;
        return this;
      }
      public Builder ClearUseParallelProcessing() {
        PrepareBuilder();
        result.hasUseParallelProcessing = false;
        result.useParallelProcessing_ = true;
        return this;
      }
      
      public bool HasVehicleType {
       get { return result.hasVehicleType; }
      }
      public global::ProtoBuffer.PathPlanningRequest.Types.UAVType VehicleType {
        get { return result.VehicleType; }
        set { SetVehicleType(value); }
      }
      public Builder SetVehicleType(global::ProtoBuffer.PathPlanningRequest.Types.UAVType value) {
        PrepareBuilder();
        result.hasVehicleType = true;
        result.vehicleType_ = value;
        return this;
      }
      public Builder ClearVehicleType() {
        PrepareBuilder();
        result.hasVehicleType = false;
        result.vehicleType_ = global::ProtoBuffer.PathPlanningRequest.Types.UAVType.Copter;
        return this;
      }
      
      public bool HasDetectionType {
       get { return result.hasDetectionType; }
      }
      public global::ProtoBuffer.PathPlanningRequest.Types.DType DetectionType {
        get { return result.DetectionType; }
        set { SetDetectionType(value); }
      }
      public Builder SetDetectionType(global::ProtoBuffer.PathPlanningRequest.Types.DType value) {
        PrepareBuilder();
        result.hasDetectionType = true;
        result.detectionType_ = value;
        return this;
      }
      public Builder ClearDetectionType() {
        PrepareBuilder();
        result.hasDetectionType = false;
        result.detectionType_ = global::ProtoBuffer.PathPlanningRequest.Types.DType.FixAmountInPercentage;
        return this;
      }
      
      public bool HasDetectionRate {
        get { return result.hasDetectionRate; }
      }
      public double DetectionRate {
        get { return result.DetectionRate; }
        set { SetDetectionRate(value); }
      }
      public Builder SetDetectionRate(double value) {
        PrepareBuilder();
        result.hasDetectionRate = true;
        result.detectionRate_ = value;
        return this;
      }
      public Builder ClearDetectionRate() {
        PrepareBuilder();
        result.hasDetectionRate = false;
        result.detectionRate_ = 1D;
        return this;
      }
      
      public bool HasDistMap {
       get { return result.hasDistMap; }
      }
      public global::ProtoBuffer.PathPlanningRequest.Types.Matrix DistMap {
        get { return result.DistMap; }
        set { SetDistMap(value); }
      }
      public Builder SetDistMap(global::ProtoBuffer.PathPlanningRequest.Types.Matrix value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasDistMap = true;
        result.distMap_ = value;
        return this;
      }
      public Builder SetDistMap(global::ProtoBuffer.PathPlanningRequest.Types.Matrix.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.hasDistMap = true;
        result.distMap_ = builderForValue.Build();
        return this;
      }
      public Builder MergeDistMap(global::ProtoBuffer.PathPlanningRequest.Types.Matrix value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        if (result.hasDistMap &&
            result.distMap_ != global::ProtoBuffer.PathPlanningRequest.Types.Matrix.DefaultInstance) {
            result.distMap_ = global::ProtoBuffer.PathPlanningRequest.Types.Matrix.CreateBuilder(result.distMap_).MergeFrom(value).BuildPartial();
        } else {
          result.distMap_ = value;
        }
        result.hasDistMap = true;
        return this;
      }
      public Builder ClearDistMap() {
        PrepareBuilder();
        result.hasDistMap = false;
        result.distMap_ = null;
        return this;
      }
      
      public bool HasDiffMap {
       get { return result.hasDiffMap; }
      }
      public global::ProtoBuffer.PathPlanningRequest.Types.Matrix DiffMap {
        get { return result.DiffMap; }
        set { SetDiffMap(value); }
      }
      public Builder SetDiffMap(global::ProtoBuffer.PathPlanningRequest.Types.Matrix value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasDiffMap = true;
        result.diffMap_ = value;
        return this;
      }
      public Builder SetDiffMap(global::ProtoBuffer.PathPlanningRequest.Types.Matrix.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.hasDiffMap = true;
        result.diffMap_ = builderForValue.Build();
        return this;
      }
      public Builder MergeDiffMap(global::ProtoBuffer.PathPlanningRequest.Types.Matrix value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        if (result.hasDiffMap &&
            result.diffMap_ != global::ProtoBuffer.PathPlanningRequest.Types.Matrix.DefaultInstance) {
            result.diffMap_ = global::ProtoBuffer.PathPlanningRequest.Types.Matrix.CreateBuilder(result.diffMap_).MergeFrom(value).BuildPartial();
        } else {
          result.diffMap_ = value;
        }
        result.hasDiffMap = true;
        return this;
      }
      public Builder ClearDiffMap() {
        PrepareBuilder();
        result.hasDiffMap = false;
        result.diffMap_ = null;
        return this;
      }
      
      public bool HasUseEndPoint {
        get { return result.hasUseEndPoint; }
      }
      public bool UseEndPoint {
        get { return result.UseEndPoint; }
        set { SetUseEndPoint(value); }
      }
      public Builder SetUseEndPoint(bool value) {
        PrepareBuilder();
        result.hasUseEndPoint = true;
        result.useEndPoint_ = value;
        return this;
      }
      public Builder ClearUseEndPoint() {
        PrepareBuilder();
        result.hasUseEndPoint = false;
        result.useEndPoint_ = false;
        return this;
      }
      
      public bool HasT {
        get { return result.hasT; }
      }
      public int T {
        get { return result.T; }
        set { SetT(value); }
      }
      public Builder SetT(int value) {
        PrepareBuilder();
        result.hasT = true;
        result.t_ = value;
        return this;
      }
      public Builder ClearT() {
        PrepareBuilder();
        result.hasT = false;
        result.t_ = 600;
        return this;
      }
      
      public bool HasPStart {
       get { return result.hasPStart; }
      }
      public global::ProtoBuffer.PathPlanningRequest.Types.DistPoint PStart {
        get { return result.PStart; }
        set { SetPStart(value); }
      }
      public Builder SetPStart(global::ProtoBuffer.PathPlanningRequest.Types.DistPoint value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasPStart = true;
        result.pStart_ = value;
        return this;
      }
      public Builder SetPStart(global::ProtoBuffer.PathPlanningRequest.Types.DistPoint.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.hasPStart = true;
        result.pStart_ = builderForValue.Build();
        return this;
      }
      public Builder MergePStart(global::ProtoBuffer.PathPlanningRequest.Types.DistPoint value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        if (result.hasPStart &&
            result.pStart_ != global::ProtoBuffer.PathPlanningRequest.Types.DistPoint.DefaultInstance) {
            result.pStart_ = global::ProtoBuffer.PathPlanningRequest.Types.DistPoint.CreateBuilder(result.pStart_).MergeFrom(value).BuildPartial();
        } else {
          result.pStart_ = value;
        }
        result.hasPStart = true;
        return this;
      }
      public Builder ClearPStart() {
        PrepareBuilder();
        result.hasPStart = false;
        result.pStart_ = null;
        return this;
      }
      
      public bool HasPEnd {
       get { return result.hasPEnd; }
      }
      public global::ProtoBuffer.PathPlanningRequest.Types.DistPoint PEnd {
        get { return result.PEnd; }
        set { SetPEnd(value); }
      }
      public Builder SetPEnd(global::ProtoBuffer.PathPlanningRequest.Types.DistPoint value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasPEnd = true;
        result.pEnd_ = value;
        return this;
      }
      public Builder SetPEnd(global::ProtoBuffer.PathPlanningRequest.Types.DistPoint.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.hasPEnd = true;
        result.pEnd_ = builderForValue.Build();
        return this;
      }
      public Builder MergePEnd(global::ProtoBuffer.PathPlanningRequest.Types.DistPoint value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        if (result.hasPEnd &&
            result.pEnd_ != global::ProtoBuffer.PathPlanningRequest.Types.DistPoint.DefaultInstance) {
            result.pEnd_ = global::ProtoBuffer.PathPlanningRequest.Types.DistPoint.CreateBuilder(result.pEnd_).MergeFrom(value).BuildPartial();
        } else {
          result.pEnd_ = value;
        }
        result.hasPEnd = true;
        return this;
      }
      public Builder ClearPEnd() {
        PrepareBuilder();
        result.hasPEnd = false;
        result.pEnd_ = null;
        return this;
      }
      
      public bool HasAlgToUse {
       get { return result.hasAlgToUse; }
      }
      public global::ProtoBuffer.PathPlanningRequest.Types.AlgType AlgToUse {
        get { return result.AlgToUse; }
        set { SetAlgToUse(value); }
      }
      public Builder SetAlgToUse(global::ProtoBuffer.PathPlanningRequest.Types.AlgType value) {
        PrepareBuilder();
        result.hasAlgToUse = true;
        result.algToUse_ = value;
        return this;
      }
      public Builder ClearAlgToUse() {
        PrepareBuilder();
        result.hasAlgToUse = false;
        result.algToUse_ = global::ProtoBuffer.PathPlanningRequest.Types.AlgType.REALTIME;
        return this;
      }
      
      public bool HasBatchRun {
        get { return result.hasBatchRun; }
      }
      public bool BatchRun {
        get { return result.BatchRun; }
        set { SetBatchRun(value); }
      }
      public Builder SetBatchRun(bool value) {
        PrepareBuilder();
        result.hasBatchRun = true;
        result.batchRun_ = value;
        return this;
      }
      public Builder ClearBatchRun() {
        PrepareBuilder();
        result.hasBatchRun = false;
        result.batchRun_ = false;
        return this;
      }
      
      public bool HasRunTimes {
        get { return result.hasRunTimes; }
      }
      public int RunTimes {
        get { return result.RunTimes; }
        set { SetRunTimes(value); }
      }
      public Builder SetRunTimes(int value) {
        PrepareBuilder();
        result.hasRunTimes = true;
        result.runTimes_ = value;
        return this;
      }
      public Builder ClearRunTimes() {
        PrepareBuilder();
        result.hasRunTimes = false;
        result.runTimes_ = 10;
        return this;
      }
      
      public bool HasMaxDifficulty {
        get { return result.hasMaxDifficulty; }
      }
      public int MaxDifficulty {
        get { return result.MaxDifficulty; }
        set { SetMaxDifficulty(value); }
      }
      public Builder SetMaxDifficulty(int value) {
        PrepareBuilder();
        result.hasMaxDifficulty = true;
        result.maxDifficulty_ = value;
        return this;
      }
      public Builder ClearMaxDifficulty() {
        PrepareBuilder();
        result.hasMaxDifficulty = false;
        result.maxDifficulty_ = 3;
        return this;
      }
      
      public pbc::IPopsicleList<double> DiffRateList {
        get { return PrepareBuilder().diffRate_; }
      }
      public int DiffRateCount {
        get { return result.DiffRateCount; }
      }
      public double GetDiffRate(int index) {
        return result.GetDiffRate(index);
      }
      public Builder SetDiffRate(int index, double value) {
        PrepareBuilder();
        result.diffRate_[index] = value;
        return this;
      }
      public Builder AddDiffRate(double value) {
        PrepareBuilder();
        result.diffRate_.Add(value);
        return this;
      }
      public Builder AddRangeDiffRate(scg::IEnumerable<double> values) {
        PrepareBuilder();
        result.diffRate_.Add(values);
        return this;
      }
      public Builder ClearDiffRate() {
        PrepareBuilder();
        result.diffRate_.Clear();
        return this;
      }
      
      public bool HasDrawPath {
        get { return result.hasDrawPath; }
      }
      public bool DrawPath {
        get { return result.DrawPath; }
        set { SetDrawPath(value); }
      }
      public Builder SetDrawPath(bool value) {
        PrepareBuilder();
        result.hasDrawPath = true;
        result.drawPath_ = value;
        return this;
      }
      public Builder ClearDrawPath() {
        PrepareBuilder();
        result.hasDrawPath = false;
        result.drawPath_ = false;
        return this;
      }
      
      public bool HasD {
        get { return result.hasD; }
      }
      public int D {
        get { return result.D; }
        set { SetD(value); }
      }
      public Builder SetD(int value) {
        PrepareBuilder();
        result.hasD = true;
        result.d_ = value;
        return this;
      }
      public Builder ClearD() {
        PrepareBuilder();
        result.hasD = false;
        result.d_ = 0;
        return this;
      }
      
      public bool HasTopNCount {
        get { return result.hasTopNCount; }
      }
      public int TopNCount {
        get { return result.TopNCount; }
        set { SetTopNCount(value); }
      }
      public Builder SetTopNCount(int value) {
        PrepareBuilder();
        result.hasTopNCount = true;
        result.topNCount_ = value;
        return this;
      }
      public Builder ClearTopNCount() {
        PrepareBuilder();
        result.hasTopNCount = false;
        result.topNCount_ = 3;
        return this;
      }
    }
    static PathPlanningRequest() {
      object.ReferenceEquals(global::ProtoBuffer.ServerQueueItemPB.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
  [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ProtoGen", "2.4.1.473")]
  public sealed partial class ServerQueueItem : pb::GeneratedMessage<ServerQueueItem, ServerQueueItem.Builder> {
    private ServerQueueItem() { }
    private static readonly ServerQueueItem defaultInstance = new ServerQueueItem().MakeReadOnly();
    private static readonly string[] _serverQueueItemFieldNames = new string[] { "CallerIP", "curRequest" };
    private static readonly uint[] _serverQueueItemFieldTags = new uint[] { 10, 18 };
    public static ServerQueueItem DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override ServerQueueItem DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override ServerQueueItem ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::ProtoBuffer.ServerQueueItemPB.internal__static_ProtoBuffer_ServerQueueItem__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<ServerQueueItem, ServerQueueItem.Builder> InternalFieldAccessors {
      get { return global::ProtoBuffer.ServerQueueItemPB.internal__static_ProtoBuffer_ServerQueueItem__FieldAccessorTable; }
    }
    
    public const int CallerIPFieldNumber = 1;
    private bool hasCallerIP;
    private string callerIP_ = "127.0.0.1";
    public bool HasCallerIP {
      get { return hasCallerIP; }
    }
    public string CallerIP {
      get { return callerIP_; }
    }
    
    public const int CurRequestFieldNumber = 2;
    private bool hasCurRequest;
    private global::ProtoBuffer.PathPlanningRequest curRequest_;
    public bool HasCurRequest {
      get { return hasCurRequest; }
    }
    public global::ProtoBuffer.PathPlanningRequest CurRequest {
      get { return curRequest_ ?? global::ProtoBuffer.PathPlanningRequest.DefaultInstance; }
    }
    
    public override bool IsInitialized {
      get {
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      int size = SerializedSize;
      string[] field_names = _serverQueueItemFieldNames;
      if (hasCallerIP) {
        output.WriteString(1, field_names[0], CallerIP);
      }
      if (hasCurRequest) {
        output.WriteMessage(2, field_names[1], CurRequest);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        
        size = 0;
        if (hasCallerIP) {
          size += pb::CodedOutputStream.ComputeStringSize(1, CallerIP);
        }
        if (hasCurRequest) {
          size += pb::CodedOutputStream.ComputeMessageSize(2, CurRequest);
        }
        size += UnknownFields.SerializedSize;
        memoizedSerializedSize = size;
        return size;
      }
    }
    
    public static ServerQueueItem ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static ServerQueueItem ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static ServerQueueItem ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static ServerQueueItem ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static ServerQueueItem ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static ServerQueueItem ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static ServerQueueItem ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static ServerQueueItem ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static ServerQueueItem ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static ServerQueueItem ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private ServerQueueItem MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(ServerQueueItem prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ProtoGen", "2.4.1.473")]
    public sealed partial class Builder : pb::GeneratedBuilder<ServerQueueItem, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(ServerQueueItem cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private ServerQueueItem result;
      
      private ServerQueueItem PrepareBuilder() {
        if (resultIsReadOnly) {
          ServerQueueItem original = result;
          result = new ServerQueueItem();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override ServerQueueItem MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::ProtoBuffer.ServerQueueItem.Descriptor; }
      }
      
      public override ServerQueueItem DefaultInstanceForType {
        get { return global::ProtoBuffer.ServerQueueItem.DefaultInstance; }
      }
      
      public override ServerQueueItem BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is ServerQueueItem) {
          return MergeFrom((ServerQueueItem) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(ServerQueueItem other) {
        if (other == global::ProtoBuffer.ServerQueueItem.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasCallerIP) {
          CallerIP = other.CallerIP;
        }
        if (other.HasCurRequest) {
          MergeCurRequest(other.CurRequest);
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_serverQueueItemFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _serverQueueItemFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 10: {
              result.hasCallerIP = input.ReadString(ref result.callerIP_);
              break;
            }
            case 18: {
              global::ProtoBuffer.PathPlanningRequest.Builder subBuilder = global::ProtoBuffer.PathPlanningRequest.CreateBuilder();
              if (result.hasCurRequest) {
                subBuilder.MergeFrom(CurRequest);
              }
              input.ReadMessage(subBuilder, extensionRegistry);
              CurRequest = subBuilder.BuildPartial();
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasCallerIP {
        get { return result.hasCallerIP; }
      }
      public string CallerIP {
        get { return result.CallerIP; }
        set { SetCallerIP(value); }
      }
      public Builder SetCallerIP(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasCallerIP = true;
        result.callerIP_ = value;
        return this;
      }
      public Builder ClearCallerIP() {
        PrepareBuilder();
        result.hasCallerIP = false;
        result.callerIP_ = "127.0.0.1";
        return this;
      }
      
      public bool HasCurRequest {
       get { return result.hasCurRequest; }
      }
      public global::ProtoBuffer.PathPlanningRequest CurRequest {
        get { return result.CurRequest; }
        set { SetCurRequest(value); }
      }
      public Builder SetCurRequest(global::ProtoBuffer.PathPlanningRequest value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasCurRequest = true;
        result.curRequest_ = value;
        return this;
      }
      public Builder SetCurRequest(global::ProtoBuffer.PathPlanningRequest.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.hasCurRequest = true;
        result.curRequest_ = builderForValue.Build();
        return this;
      }
      public Builder MergeCurRequest(global::ProtoBuffer.PathPlanningRequest value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        if (result.hasCurRequest &&
            result.curRequest_ != global::ProtoBuffer.PathPlanningRequest.DefaultInstance) {
            result.curRequest_ = global::ProtoBuffer.PathPlanningRequest.CreateBuilder(result.curRequest_).MergeFrom(value).BuildPartial();
        } else {
          result.curRequest_ = value;
        }
        result.hasCurRequest = true;
        return this;
      }
      public Builder ClearCurRequest() {
        PrepareBuilder();
        result.hasCurRequest = false;
        result.curRequest_ = null;
        return this;
      }
    }
    static ServerQueueItem() {
      object.ReferenceEquals(global::ProtoBuffer.ServerQueueItemPB.Descriptor, null);
    }
  }
  
  #endregion
  
}

#endregion Designer generated code
